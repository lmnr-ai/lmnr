# This compose definition builds Laminar images locally. This is meant to be
# run at the last step of local development as a check before pushing changes.
name: lmnr

services:

  rabbitmq:
    image: rabbitmq
    pull_policy: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 7s
      timeout: 5s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    pull_policy: always
    container_name: clickhouse
    volumes:
      - type: volume
        source: clickhouse-data
        target: /var/lib/clickhouse/
      - type: volume
        source: clickhouse-logs
        target: /var/log/clickhouse-server/
      - type: bind
        source: ./clickhouse-profiles-config.xml
        target: /etc/clickhouse-server/users.d/lmnr.xml
    environment:
        CLICKHOUSE_USER: ${CLICKHOUSE_USER}
        CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  postgres:
    image: postgres:16
    pull_policy: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 5

  app-server:
    ports:
      - "${APP_SERVER_HOST_PORT:-8000}:8000"
      - "${APP_SERVER_GRPC_HOST_PORT:-8001}:8001"
    build:
      context: ./app-server
    container_name: app-server
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clickhouse:
        condition: service_started
      agent-manager:
        condition: service_healthy
    environment:
      PORT: 8000
      GRPC_PORT: 8001
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/%2f
      SHARED_SECRET_TOKEN: ${SHARED_SECRET_TOKEN}
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      ENVIRONMENT: FULL
      AEAD_SECRET_KEY: ${AEAD_SECRET_KEY}

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "${FRONTEND_HOST_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_started
    environment:
      PORT: 3000
      BACKEND_URL: http://app-server:8000
      SHARED_SECRET_TOKEN: ${SHARED_SECRET_TOKEN}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      ENVIRONMENT: FULL
      CLICKHOUSE_URL: http://clickhouse:8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AEAD_SECRET_KEY: ${AEAD_SECRET_KEY}

volumes:
  clickhouse-data:
  clickhouse-logs:
  postgres-data:
