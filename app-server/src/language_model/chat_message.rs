use std::sync::{Arc, LazyLock};

use anyhow::Result;
use regex::Regex;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

use crate::storage::{Storage, StorageTrait};

static DATA_URL_REGEX: LazyLock<Regex> =
    LazyLock::new(|| Regex::new(r"^data:(image/[a-zA-Z]+);base64,.*$").unwrap());

#[derive(Deserialize)]
pub struct ImageUrl {
    pub url: String,
    #[serde(default)]
    pub detail: Option<String>,
}

#[derive(Deserialize)]
pub struct OpenAIImageUrl {
    pub image_url: ImageUrl,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ChatMessageText {
    pub text: String,
}

/// Chat message image url
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct ChatMessageImageUrl {
    pub url: String,
    #[serde(default)]
    pub detail: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct DefaultChatMessageImage {
    pub media_type: String, // e.g. "image/jpeg"
    pub data: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct ChatMessageImageAISDKRawBytes {
    pub image: Vec<u8>,
    #[serde(default)]
    pub mime_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct ChatMessageImageAISDKRawBase64 {
    pub image: String,
    #[serde(default)]
    pub mime_type: Option<String>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
#[serde(untagged)]
pub enum ChatMessageImage {
    Default(DefaultChatMessageImage),
    // On outer AI SDK spans
    AISDKRawBytes(ChatMessageImageAISDKRawBytes),
    // Inner, doGenerate and doStream spans
    AISDKRawBase64(ChatMessageImageAISDKRawBase64),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ChatMessageDocumentSource {
    #[serde(rename = "type")]
    pub document_type: String, // "base64"
    pub media_type: String, // e.g. "application/pdf"
    pub data: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ChatMessageDocumentUrl {
    pub media_type: String, // e.g. "application/pdf"
    pub url: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct ChatMessageDocument {
    pub source: ChatMessageDocumentSource,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct ChatMessageToolCall {
    pub name: String,
    pub id: Option<String>,
    pub arguments: Option<serde_json::Value>,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(tag = "type")]
pub enum ChatMessageContentPart {
    #[serde(rename = "text")]
    Text(ChatMessageText),
    #[serde(rename = "image_url")]
    ImageUrl(ChatMessageImageUrl),
    #[serde(rename = "image")]
    Image(ChatMessageImage),
    #[serde(rename = "document")]
    Document(ChatMessageDocument),
    #[serde(rename = "document_url")]
    DocumentUrl(ChatMessageDocumentUrl),
    #[serde(rename = "tool_call")]
    ToolCall(ChatMessageToolCall),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(untagged)]
pub enum ChatMessageContent {
    Text(String),
    ContentPartList(Vec<ChatMessageContentPart>),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ChatMessage {
    pub role: String,
    pub content: ChatMessageContent,
}

#[derive(Deserialize)]
pub struct InstrumentationChatMessageImageSource {
    media_type: String,
    data: String,
}

#[derive(Deserialize)]
pub struct InstrumentationChatMessageImage {
    source: InstrumentationChatMessageImageSource,
}

#[derive(Deserialize)]
#[serde(untagged)]
pub enum InstrumentationChatMessageImageUrl {
    // TODO: Add support for other providers
    OpenAIImageUrl(OpenAIImageUrl),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct InstrumentationChatMessageDocumentBase64 {
    pub media_type: String, // e.g. "application/pdf"
    pub data: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(tag = "type")]
pub enum InstrumentationChatMessageDocumentSource {
    #[serde(rename = "base64")]
    Base64(InstrumentationChatMessageDocumentBase64),
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct InstrumentationChatMessageDocument {
    pub source: InstrumentationChatMessageDocumentSource,
}

/// Struct to decode any kind of chat message content part from automatic instrumentation by OpenLLMetry
///
/// ImageUrl contains different kinds of imageurls generated by autoinstrumentation.
#[derive(Deserialize)]
#[serde(tag = "type")]
pub enum InstrumentationChatMessageContentPart {
    #[serde(rename = "text")]
    Text(ChatMessageText),
    #[serde(rename = "image_url")]
    ImageUrl(InstrumentationChatMessageImageUrl),
    #[serde(rename = "image")]
    Image(InstrumentationChatMessageImage),
    #[serde(rename = "document")]
    Document(InstrumentationChatMessageDocument),
}

impl ChatMessageContentPart {
    pub fn from_instrumentation_content_part(
        part: InstrumentationChatMessageContentPart,
    ) -> ChatMessageContentPart {
        match part {
            InstrumentationChatMessageContentPart::Text(text) => ChatMessageContentPart::Text(text),
            InstrumentationChatMessageContentPart::ImageUrl(image_url) => match image_url {
                InstrumentationChatMessageImageUrl::OpenAIImageUrl(image_url) => {
                    ChatMessageContentPart::ImageUrl(ChatMessageImageUrl {
                        url: image_url.image_url.url,
                        detail: image_url.image_url.detail,
                    })
                }
            },
            InstrumentationChatMessageContentPart::Image(image) => {
                ChatMessageContentPart::Image(ChatMessageImage::Default(DefaultChatMessageImage {
                    media_type: image.source.media_type,
                    data: image.source.data,
                }))
            }
            InstrumentationChatMessageContentPart::Document(document) => match document.source {
                InstrumentationChatMessageDocumentSource::Base64(document_source) => {
                    ChatMessageContentPart::Document(ChatMessageDocument {
                        source: ChatMessageDocumentSource {
                            document_type: "base64".to_string(),
                            media_type: document_source.media_type,
                            data: document_source.data,
                        },
                    })
                }
            },
        }
    }

    /// Store the media in the storage and replace the media with the url
    /// returning the modified `ChatMessageContentPart`.
    /// For `Image`, we replace the content with `ImageUrl`
    pub async fn store_media(
        &self,
        project_id: &Uuid,
        storage: Arc<Storage>,
    ) -> Result<ChatMessageContentPart> {
        match self {
            ChatMessageContentPart::Image(image) => {
                let key = crate::storage::create_key(project_id, &None);
                let data = match image {
                    ChatMessageImage::Default(image) => {
                        crate::storage::base64_to_bytes(&image.data)?
                    }
                    ChatMessageImage::AISDKRawBytes(image) => image.image.clone(),
                    ChatMessageImage::AISDKRawBase64(image) => {
                        // strip off the data:image/...;base64, prefix if present
                        let base64_data =
                            raw_base64_from_data_url(&image.image).unwrap_or(&image.image);
                        crate::storage::base64_to_bytes(&base64_data)?
                    }
                };
                let media_type = match image {
                    ChatMessageImage::Default(image) => image.media_type.clone(),
                    ChatMessageImage::AISDKRawBytes(image) => {
                        image.mime_type.clone().unwrap_or("image/png".to_string())
                    }
                    ChatMessageImage::AISDKRawBase64(image) => image.mime_type.clone().unwrap_or({
                        // only check the first 50 characters to avoid expensive regex matching
                        let chars = image.image.chars().take(50).collect::<String>();
                        let caps: Option<regex::Captures<'_>> = DATA_URL_REGEX.captures(&chars);
                        caps.map_or("image/png".to_string(), |caps| caps[1].to_string())
                    }),
                };
                let url = storage.store(data, &key).await?;
                Ok(ChatMessageContentPart::ImageUrl(ChatMessageImageUrl {
                    url,
                    detail: Some(format!("media_type:{};base64", media_type)),
                }))
            }
            ChatMessageContentPart::Document(document) => {
                let file_extension = if &document.source.media_type == "application/pdf" {
                    Some("pdf".to_string())
                } else {
                    None
                };
                let key = crate::storage::create_key(project_id, &file_extension);
                let data = crate::storage::base64_to_bytes(&document.source.data)?;
                let url = storage.store(data, &key).await?;
                Ok(ChatMessageContentPart::DocumentUrl(
                    ChatMessageDocumentUrl {
                        media_type: document.source.media_type.clone(),
                        url,
                    },
                ))
            }
            ChatMessageContentPart::ImageUrl(image_url) => {
                if let Some(base64_data) = raw_base64_from_data_url(&image_url.url) {
                    let data = crate::storage::base64_to_bytes(base64_data)?;
                    let key = crate::storage::create_key(project_id, &None);
                    let url = storage.store(data, &key).await?;
                    Ok(ChatMessageContentPart::ImageUrl(ChatMessageImageUrl {
                        url,
                        detail: image_url.detail.clone(),
                    }))
                } else {
                    // Otherwise, assume it's a regular image url
                    Ok(self.clone())
                }
            }
            _ => Ok(self.clone()),
        }
    }
}

/// Extract the raw base64 data from a data URL.
fn raw_base64_from_data_url(data_url: &str) -> Option<&str> {
    // We only check the first 50 characters to avoid expensive regex matching.
    // The mimeType is fairly short, so 50 characters is more than enough.
    if DATA_URL_REGEX.is_match(&data_url.chars().take(50).collect::<String>()) {
        data_url.split_once(',').map(|(_, base64_data)| base64_data)
    } else {
        None
    }
}
