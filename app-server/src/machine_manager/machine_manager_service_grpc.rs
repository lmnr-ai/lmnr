// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartMachineRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartMachineResponse {
    #[prost(string, tag = "1")]
    pub machine_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ComputerActionCoordinate {
    #[prost(int32, tag = "1")]
    pub x: i32,
    #[prost(int32, tag = "2")]
    pub y: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComputerActionRequest {
    #[prost(string, tag = "1")]
    pub machine_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ComputerAction", tag = "2")]
    pub action: i32,
    #[prost(string, optional, tag = "3")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub coordinates: ::core::option::Option<ComputerActionCoordinate>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComputerActionResponse {
    #[prost(string, optional, tag = "1")]
    pub output: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub base64_image: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub system: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TerminateMachineRequest {
    #[prost(string, tag = "1")]
    pub machine_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TerminateMachineResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ComputerAction {
    Key = 0,
    Type = 1,
    MouseMove = 2,
    LeftClick = 3,
    LeftClickDrag = 4,
    RightClick = 5,
    MiddleClick = 6,
    DoubleClick = 7,
    Screenshot = 8,
    CursorPosition = 9,
}
impl ComputerAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Key => "KEY",
            Self::Type => "TYPE",
            Self::MouseMove => "MOUSE_MOVE",
            Self::LeftClick => "LEFT_CLICK",
            Self::LeftClickDrag => "LEFT_CLICK_DRAG",
            Self::RightClick => "RIGHT_CLICK",
            Self::MiddleClick => "MIDDLE_CLICK",
            Self::DoubleClick => "DOUBLE_CLICK",
            Self::Screenshot => "SCREENSHOT",
            Self::CursorPosition => "CURSOR_POSITION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KEY" => Some(Self::Key),
            "TYPE" => Some(Self::Type),
            "MOUSE_MOVE" => Some(Self::MouseMove),
            "LEFT_CLICK" => Some(Self::LeftClick),
            "LEFT_CLICK_DRAG" => Some(Self::LeftClickDrag),
            "RIGHT_CLICK" => Some(Self::RightClick),
            "MIDDLE_CLICK" => Some(Self::MiddleClick),
            "DOUBLE_CLICK" => Some(Self::DoubleClick),
            "SCREENSHOT" => Some(Self::Screenshot),
            "CURSOR_POSITION" => Some(Self::CursorPosition),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod machine_manager_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MachineManagerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MachineManagerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MachineManagerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MachineManagerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MachineManagerServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn start_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::StartMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StartMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/machine_manager_service_grpc.MachineManagerService/StartMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "machine_manager_service_grpc.MachineManagerService",
                        "StartMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn terminate_machine(
            &mut self,
            request: impl tonic::IntoRequest<super::TerminateMachineRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TerminateMachineResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/machine_manager_service_grpc.MachineManagerService/TerminateMachine",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "machine_manager_service_grpc.MachineManagerService",
                        "TerminateMachine",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn execute_computer_action(
            &mut self,
            request: impl tonic::IntoRequest<super::ComputerActionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ComputerActionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/machine_manager_service_grpc.MachineManagerService/ExecuteComputerAction",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "machine_manager_service_grpc.MachineManagerService",
                        "ExecuteComputerAction",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
