// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageText {
    #[prost(string, tag = "1")]
    pub text: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageImageUrl {
    /// ignore detail for now
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageImage {
    #[prost(string, tag = "1")]
    pub media_type: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub data: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageContentPart {
    #[prost(oneof = "chat_message_content_part::Value", tags = "1, 2, 3")]
    pub value: ::core::option::Option<chat_message_content_part::Value>,
}
/// Nested message and enum types in `ChatMessageContentPart`.
pub mod chat_message_content_part {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(message, tag = "1")]
        Text(super::ChatMessageText),
        #[prost(message, tag = "2")]
        ImageUrl(super::ChatMessageImageUrl),
        #[prost(message, tag = "3")]
        Image(super::ChatMessageImage),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPartList {
    #[prost(message, repeated, tag = "1")]
    pub parts: ::prost::alloc::vec::Vec<ChatMessageContentPart>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageContent {
    #[prost(oneof = "chat_message_content::Value", tags = "1, 2")]
    pub value: ::core::option::Option<chat_message_content::Value>,
}
/// Nested message and enum types in `ChatMessageContent`.
pub mod chat_message_content {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "1")]
        Text(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        ContentPartList(super::ContentPartList),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMessageList {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<chat_message_list::ChatMessage>,
}
/// Nested message and enum types in `ChatMessageList`.
pub mod chat_message_list {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ChatMessage {
        #[prost(string, tag = "1")]
        pub role: ::prost::alloc::string::String,
        #[prost(message, optional, tag = "2")]
        pub content: ::core::option::Option<super::ChatMessageContent>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringList {
    #[prost(string, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Arg {
    #[prost(oneof = "arg::Value", tags = "1, 2, 3, 4, 5")]
    pub value: ::core::option::Option<arg::Value>,
}
/// Nested message and enum types in `Arg`.
pub mod arg {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(string, tag = "1")]
        StringValue(::prost::alloc::string::String),
        #[prost(message, tag = "2")]
        MessagesValue(super::ChatMessageList),
        #[prost(message, tag = "3")]
        StringListValue(super::StringList),
        #[prost(double, tag = "4")]
        FloatValue(f64),
        #[prost(bool, tag = "5")]
        BoolValue(bool),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteCodeRequest {
    #[prost(string, tag = "1")]
    pub code: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub fn_name: ::prost::alloc::string::String,
    #[prost(map = "string, message", tag = "3")]
    pub args: ::std::collections::HashMap<::prost::alloc::string::String, Arg>,
    #[prost(enumeration = "HandleType", tag = "4")]
    pub return_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteCodeResponse {
    #[prost(oneof = "execute_code_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<execute_code_response::Response>,
}
/// Nested message and enum types in `ExecuteCodeResponse`.
pub mod execute_code_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ErrorMessage {
        #[prost(string, tag = "1")]
        pub message: ::prost::alloc::string::String,
    }
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        Result(super::Arg),
        #[prost(message, tag = "2")]
        Error(ErrorMessage),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HandleType {
    Any = 0,
    String = 1,
    StringList = 2,
    ChatMessageList = 3,
    Float = 4,
}
impl HandleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Any => "ANY",
            Self::String => "STRING",
            Self::StringList => "STRING_LIST",
            Self::ChatMessageList => "CHAT_MESSAGE_LIST",
            Self::Float => "FLOAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANY" => Some(Self::Any),
            "STRING" => Some(Self::String),
            "STRING_LIST" => Some(Self::StringList),
            "CHAT_MESSAGE_LIST" => Some(Self::ChatMessageList),
            "FLOAT" => Some(Self::Float),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod code_executor_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct CodeExecutorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CodeExecutorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CodeExecutorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CodeExecutorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CodeExecutorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn execute(
            &mut self,
            request: impl tonic::IntoRequest<super::ExecuteCodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecuteCodeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/code_executor_grpc.CodeExecutor/Execute",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("code_executor_grpc.CodeExecutor", "Execute"));
            self.inner.unary(req, path, codec).await
        }
    }
}
