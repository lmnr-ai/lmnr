syntax = "proto3";

package agent_manager_grpc;

enum ModelProvider {
    ANTHROPIC = 0;
    BEDROCK = 1;
}

message RunAgentRequest {
    string prompt = 1;
    string session_id = 2;
    // control flag to distinguish frontend requests
    bool is_chat_request = 3;
    optional string request_api_key = 4;
    optional string cdp_url = 5;
    optional string parent_span_context = 6;
    optional ModelProvider model_provider = 7;
    optional string model = 8;
    optional bool enable_thinking = 9;
    optional bool return_screenshots = 10;
    optional bool return_agent_state = 11;
    optional bool return_storage_state = 12;
    optional string storage_state = 13;
    optional string agent_state = 14;
    optional uint64 timeout = 15;
    optional uint64 max_steps = 16;
    optional uint64 thinking_token_budget = 17;
    optional string start_url = 18;
}

message ActionResult {
    optional bool is_done = 1;
    optional string content = 2;
    optional string error = 3;
    optional bool give_control = 4;
}

message StepChunkContent {
    ActionResult action_result = 1;
    string summary = 2;
    string trace_id = 3;
    optional string screenshot = 4;
}

message AgentOutput {
    ActionResult result = 1;
    optional string trace_id = 2;
    optional uint64 step_count = 3;
    optional string storage_state = 4;
    optional string agent_state = 5;
}

message ErrorChunkContent {
    string content = 1;
}

message RunAgentResponseStreamChunk {
    oneof chunk_type {
        StepChunkContent step_chunk_content = 1;
        AgentOutput agent_output = 2;
        ErrorChunkContent error_chunk_content = 3;
        StepChunkContent timeout_chunk_content = 4;
    }
}

service AgentManagerService {
    rpc RunAgent(RunAgentRequest) returns (AgentOutput);
    rpc RunAgentStream(RunAgentRequest) returns (stream RunAgentResponseStreamChunk);
}
